#!/usr/bin/python

from os import system, popen
from sys import argv
from datetime import timedelta

TIME_LIMIT = 50

def	read_data():
	text = [""] * 7
	try:
		file = open("timedata", 'r')
	except:
		clear_data()
		file = open("timedata", 'r')
	for i in range(7):
		text[i] = file.next()[:-1]
	file.close()
	return text

def	clear_data():
	with open("timedata", 'w') as file:
		file.write("0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n")

def	write_curtime():
	if valid_time(argv[1]):
		print("Unknown command")
		exit()
	text = read_data()
	text[def_daynumb()] = argv[1]
	day, time_target, time_work, time_remain, overflow = definding(text)
	printing(text, day, time_target, time_work, time_remain, overflow)

def	def_daynumb():
	day_str = popen("date | awk '{print $1}'").read()[:-1]
	if day_str == "Sun":
		return (0)
	if day_str == "Mon":
		return (1)
	if day_str == "Tue":
		return (2)
	if day_str == "Wed":
		return (3)
	if day_str == "Thu":
		return (4)
	if day_str == "Fri":
		return (5)
	if day_str == "Sat":
		return (6)
	timestr = timestr.replace(':', '.')
	return (timestr)

def	customchange_data(text):
	valid_data(text)
	if argv[2] == "0":
		text[argv[1] - 1] = "0.0"
	else:
		text[argv[1] - 1] = argv[2]
	with open("timedata", 'w') as file:
		for i in range(7):
			file.write(text[i])
			file.write("\n")

def	valid_data(text):
	valid_day()
	if valid_time(argv[2]):
		print("Format for fill working time must be: [hours].[minutes]")
		exit()

def	valid_day():
	try:
		argv[1] = int(argv[1])
	except:
		print("First argument must be int")
		exit()
	if not 0 < argv[1] < 8:
		print("First argument must be in the range: 1 - 7")
		exit()
	if argv[2] == "0":
		return

def	valid_time(arg):
	try:
		spt = arg.index('.')
	except:
		return (1)
	if spt != arg.rindex('.'):
		return (1)
	try:
		hours = int(arg[:spt])
		minutes = int(arg[spt + 1:])
	except:
		return (1)
	if not -1 < hours < 25 or not -1 < minutes < 60:
		print("Hours must be in the range: 0 - 24\nMinutes must be in the range: 0 - 59")
		exit()
	if hours == 24 and not minutes == 0:
		print("If hours equally 24, minutes must be equally 0")
		exit()

def	fill_daytime(text):
	day = [timedelta(hours=0, minutes=0)] * 7
	for i in range(7):
		spt = text[i].index('.')
		day[i] = timedelta(hours=int(text[i][:spt]), minutes=int(text[i][spt + 1:]))
	return day

def	def_timework(day):
	time_work = timedelta(hours=0, minutes=0)
	for i in day:
		time_work += i
	time_work = int(time_work.total_seconds())
	return time_work

def	def_timeremain(time_target, time_work):
	time_remain = time_target - time_work
	overflow = 0
	if time_remain < 0:
		overflow = 1
		time_remain = -time_remain
	return (time_remain, overflow)

def	write_daytime(text, day):
	for i in range(7):
		spt = int(text[i].find('.'))
		print("day {}: {} hours {} minutes".format(i + 1, text[i][:spt], text[i][spt + 1:]))

def	write_stats(time_target, time_work, time_remain, overflow):
	hours = 0
	while time_target >= 3600:
		time_target -= 3600
		hours += 1
	minutes = time_target / 60
	print("Target time:	{} hours {} minutes".format(hours, minutes))
	hours = 0
	while time_work >= 3600:
		time_work -= 3600
		hours += 1
	minutes = time_work / 60
	print("Working time:	{} hours {} minutes".format(hours, minutes))
	hours = 0
	while time_remain >= 3600:
		time_remain -= 3600
		hours += 1
	minutes = time_remain / 60
	if overflow == 0:
		print("\033[31mRemaining time:	{} hours {} minutes".format(hours, minutes))
	else:
		print("\033[32mOverflow time:	{} hours {} minutes".format(hours, minutes))

def	definding(text):
	time_target = int(timedelta(hours=TIME_LIMIT, minutes=0).total_seconds())
	day = fill_daytime(text)
	time_work = def_timework(day)
	time_remain, overflow = def_timeremain(time_target, time_work)
	return (day, time_target, time_work, time_remain, overflow)

def	printing(text, day, time_target, time_work, time_remain, overflow):
	print
	write_daytime(text, day)
	print
	write_stats(time_target, time_work, time_remain, overflow)

def	main():
	if not 0 < len(argv) < 4:
		print("Number of arguments must be in the range: 0 - 2")
		exit()

	if len(argv) == 1:
		text = read_data()
		day, time_target, time_work, time_remain, overflow = definding(text)
		printing(text, day, time_target, time_work, time_remain, overflow)
		exit()

	if len(argv) == 2:
		if (argv[1] == "clear"):
			clear_data()
			text = read_data()
			day, time_target, time_work, time_remain, overflow = definding(text)
			printing(text, day, time_target, time_work, time_remain, overflow)
			exit()
		if (argv[1] == "list"):
			text = read_data()
			autochange_data(text)
			day, time_target, time_work, time_remain, overflow = definding(text)
			write_daytime(text, day)
			exit()
		if (argv[1] == "stat"):
			text = read_data()
			day, time_target, time_work, time_remain, overflow = definding(text)
			write_stats(time_target, time_work, time_remain, overflow)
			exit()
		if (argv[1] == "help"):
			if system('cat readme.md 2> /dev/null'):
				print("Readme file not found. Read instruction on https://github.com/Sladge17/Timer21")
			exit()
		write_curtime()
		exit()

	if len(argv) == 3:
		text = read_data()
		customchange_data(text)
		day, time_target, time_work, time_remain, overflow = definding(text)
		printing(text, day, time_target, time_work, time_remain, overflow)
		exit()

	print("Something wrong :(")


if __name__ == '__main__':
	main()
